#!/usr/local/bin/python
# -*- coding: UTF-8 -*-

"""Widgets made using the reportlab toolkit implementing the various
hazard warning symbols.

Currently implements widgets for:
"RADIOACTIVE", "BIOHAZARD", "COGNITOHAZARD", "INFOHAZARD" and "HOSTILE".
"""


#Content relating to the SCP Foundation, including the SCP Foundation
#logo, is licensed under Creative Commons Sharealike 3.0 and all
#concepts originate from http://www.scpwiki.com and its authors.
#This file, being derived from this content, is hereby
#also released under Creative Commons Sharealike 3.0.

#See http://www.scpwiki.com/licensing-guide and
#http://creativecommons.org/licenses/by-sa/3.0/ for more information.

import random, string

#hope we have svglib installed...
from svglib.svglib import NoStrokePath

#used by make_elements()
import sys, os, copy
from types import *

try:
    import reportlab
except ImportError:
    print "\n***ERROR! ***\n"
    print "This program requires the reportlab Open Source toolkit."
    print "Download it from https://www.reportlab.com/dev/downloads/"
    print "\n"
    raise

#reportlab imports
from reportlab.lib import colors
from reportlab.lib.validators import *
from reportlab.lib.attrmap import *
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import stringWidth
from reportlab.graphics import shapes
from reportlab.graphics.widgetbase import Widget
from reportlab.graphics import renderPDF
from reportlab.graphics import renderPM

from reportlab.graphics.shapes import Drawing, Group, Path, Ellipse, Circle, Polygon, PolyLine, String, Rect
#from reportlab.lib.colors import Color, CMYKColor, PCMYKColor


import scp_widgets, hazard_widgets, objects
from objects import KNOWN_SCPS_DICT, GetRisks 

#register fonts
pdfmetrics.registerFont(TTFont('Bauhaus Demi', os.path.join("fonts", 'Bauhaus_Demi.ttf')))
#pdfmetrics.registerFont(TTFont('Gill Sans Nova', os.path.join("fonts", 'GillSansNova.ttf')))
pdfmetrics.registerFont(TTFont('Gill Sans Nova Bold', os.path.join("fonts", 'GillSansBoNova.ttf')))


MAKE_ELEMENTS = 1
MAKE_ELEMENTS = 0


#DEFINE OUR CUSTOM COLORS...
#YELLOW
#Object/Disruption/Risk
#Euclid/KENEQ/Warning
yellow_background_colour = colors.Color(253.0/255.0,
                                        246.0/255.0,
                                        214.0/255.0)
yellow_bar_colour = colors.Color(254.0/255.0,
                                 211.0/255.0,
                                 0.0/255.0)

#BLUE
#Object/Disruption/Risk
#-/VLAM/Caution
blue_background_colour = colors.Color(214.0/255.0,
                                        234.0/255.0,
                                        242.0/255.0)
blue_bar_colour = colors.Color(0.0/255.0,
                               135.0/255.0,
                               189.0/255.0)
                                        
#GREEN
#Object/Disruption/Risk
#Safe/DARK/Notice
green_background_colour = colors.Color(215.0/255.0,
                                       230.0/255.0,
                                       231.0/255.0)
green_bar_colour = colors.Color(0.0/255.0,
                                159.0/255.0,
                                107.0/255.0)

#RED
#Object/Disruption/Risk
#Keter/Critical/AMIDA
red_background_colour = colors.Color(246.0/255.0,
                                        217.0/255.0,
                                        224.0/255.0)
red_bar_colour = colors.Color(196.0/255.0,
                              2.0/255.0,
                              51.0/255.0)
                                        
#ORANGE
#Object/Disruption/Risk
#-/EKHI/Danger
orange_background_colour = colors.Color(255.0/255.0,
                                        233.0/255.0,
                                        217.0/255.0)

orange_bar_colour = colors.Color(255.0/255.0,
                                 109.0/255.0,
                                 0.0/255.0)


class _Symbol(Widget):
    """Abstract base widget
    possible attributes:
    'x', 'y', 'size', 'fillColor', 'strokeColor'
    """
    _nodoc = 1
    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc='symbol x coordinate'),
        y = AttrMapValue(isNumber,desc='symbol y coordinate'),
        dx = AttrMapValue(isNumber,desc='symbol x coordinate adjustment'),
        dy = AttrMapValue(isNumber,desc='symbol x coordinate adjustment'),
        size = AttrMapValue(isNumber),
        fillColor = AttrMapValue(isColorOrNone),
        strokeColor = AttrMapValue(isColorOrNone),
        strokeWidth = AttrMapValue(isNumber),
        )
    def __init__(self):
        assert self.__class__.__name__!='_Symbol', 'Abstract class _Symbol instantiated'
        self.x = self.y = self.dx = self.dy = 0
        self.size = 100
        self.fillColor = colors.red
        self.strokeColor = None
        self.strokeWidth = 0.1

    def demo(self):
        D = shapes.Drawing(200, 100)
        s = float(self.size)
        ob = self.__class__()
        ob.x=50
        ob.y=0
        ob.draw()
        D.add(ob)
        D.add(shapes.String(ob.x+(s/2),(ob.y-12),
                            ob.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=10))
        return D


class Radioactive(_Symbol):

    def __init__(self):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        #g.transform = (1,0,0,-1,0,200)
        #triangle
        g.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        g.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))
        #rdioactivity symbol
        v0=g._nn(Group())
        v0.add(PolyLine(points=[297.735,102.265,82.573,472.039,511.546,472.039,297.735,102.265],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,strokeColor=None,strokeLineCap=0))
        v0.add(NoStrokePath(strokeDashArray=None,strokeWidth=0,strokeMiterLimit=0,operators=[0,2,2,2,2,3],strokeOpacity=1,strokeLineJoin=0,points=[297.991,330.682,309.61,330.682,319.026,340.101,319.026,351.719,319.026,363.336,309.61,372.757,297.991,372.757,286.373,372.757,276.956,363.337,276.956,351.719,276.956,340.101,286.373,330.682,297.991,330.682],fillOpacity=1,autoclose=None,strokeColor=None,strokeLineCap=0,isClipPath=0,fillColor=self.strokeColor))
        v0.add(Path(points=[297.991,330.682,309.61,330.682,319.026,340.101,319.026,351.719,319.026,363.336,309.61,372.757,297.991,372.757,286.373,372.757,276.956,363.337,276.956,351.719,276.956,340.101,286.373,330.682,297.991,330.682],operators=[0,2,2,2,2],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=None))
        v0.add(NoStrokePath(strokeDashArray=None,strokeWidth=0,strokeMiterLimit=0,operators=[0,1,2,2,2,2,2,2,3],strokeOpacity=1,strokeLineJoin=0,points=[314.068,378.463,314.068,378.463,314.068,378.463,306.706,383.123,297.992,383.123,289.278,383.123,281.314,378.463,281.314,378.463,280.414,380.118,244.052,441.722,244.052,441.722,244.052,441.722,265.687,458.099,297.99,458.099,330.296,458.097,350.731,441.722,350.731,441.722,348.328,437.066,314.068,378.463,314.068,378.463],fillOpacity=1,autoclose=None,strokeColor=None,strokeLineCap=0,isClipPath=0,fillColor=self.strokeColor))
        v0.add(Path(points=[314.068,378.463,314.068,378.463,314.068,378.463,306.706,383.123,297.992,383.123,289.278,383.123,281.314,378.463,281.314,378.463,280.414,380.118,244.052,441.722,244.052,441.722,244.052,441.722,265.687,458.099,297.99,458.099,330.296,458.097,350.731,441.722,350.731,441.722,348.328,437.066,314.068,378.463,314.068,378.463],operators=[0,1,2,2,2,2,2,2],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=None))
        v0.add(NoStrokePath(strokeDashArray=None,strokeWidth=0,strokeMiterLimit=0,operators=[0,1,2,2,2,2,2,2,3],strokeOpacity=1,strokeLineJoin=0,points=[312.618,323.346,312.618,323.346,312.618,323.346,320.368,327.327,324.794,334.835,329.216,342.344,329.244,351.57,329.244,351.57,331.128,351.508,402.659,351.57,402.659,351.57,402.659,351.57,405.79,324.617,389.392,296.781,372.996,268.947,348.515,259.655,348.515,259.655,345.723,264.088,312.618,323.346,312.618,323.346],fillOpacity=1,autoclose=None,strokeColor=None,strokeLineCap=0,isClipPath=0,fillColor=self.strokeColor))
        v0.add(Path(points=[312.618,323.346,312.618,323.346,312.618,323.346,320.368,327.327,324.794,334.835,329.216,342.344,329.244,351.57,329.244,351.57,331.128,351.508,402.659,351.57,402.659,351.57,402.659,351.57,405.79,324.617,389.392,296.781,372.996,268.947,348.515,259.655,348.515,259.655,345.723,264.088,312.618,323.346,312.618,323.346],operators=[0,1,2,2,2,2,2,2],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=None))
        v0.add(NoStrokePath(strokeDashArray=None,strokeWidth=0,strokeMiterLimit=0,operators=[0,1,2,2,2,2,2,2,3],strokeOpacity=1,strokeLineJoin=0,points=[282.462,323.346,282.462,323.346,282.462,323.346,274.712,327.327,270.29,334.835,265.867,342.344,265.838,351.57,265.838,351.57,263.958,351.508,192.424,351.57,192.424,351.57,192.424,351.57,189.293,324.617,205.688,296.781,222.086,268.947,246.567,259.655,246.567,259.655,249.362,264.088,282.462,323.346,282.462,323.346],fillOpacity=1,autoclose=None,strokeColor=None,strokeLineCap=0,isClipPath=0,fillColor=self.strokeColor))
        v0.transform = (1.25,0,0,1.25,-75,-100)

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(600)), float(float(s)/float(600)))

        return g


class Biohazard(_Symbol):

    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc="x offset"),
        y = AttrMapValue(isNumber,desc="y offset"),
        size = AttrMapValue(isNumber,desc="scale"),
        background = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        fillColor = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        strokeColor = AttrMapValue(isColorOrNone,desc='the color of the stroke'),
        )

    def __init__(self,width=200.0,height=200.0,*args,**kw):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        g.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v1=g._nn(Group())
        v1.transform = (1,0,0,.995915,.125,2.033244)
        #triangle
        #v1.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v1.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))
        #biohazard symbol
        v1=g._nn(Group())
        v1.transform = (.575,0,0,.575,149.5001,189.1104)
        v2=v1._nn(Group())
        v2.transform = (10,0,0,-10,260,260)
        v2.add(Path(points=[2.8117,-1.046,3.123468,-0.207912,3.045125,.725565,2.598027,1.499964,2.15093,2.274363,1.381689,2.808951,.5,2.958,.5,4.5119,5.808309,4.764864,10.09066,8.944037,10.47299,14.2446,10.85532,19.54516,7.217057,24.29565,2,25.3078,2,25.8661,6.022108,25.325,9.653319,23.17724,12.06479,19.91305,14.47627,16.64886,15.46218,12.54684,14.7975,8.5433,18.59699,7.117153,21.65646,4.212323,23.27759,.491846,24.89871,-3.228631,24.94313,-7.447215,23.4007,-11.201,22.9172,-10.9218,24.64921,-5.897605,22.3543,-0.371505,17.57269,1.947677,12.79108,4.266859,7.03061,2.647789,4.1574,-1.8229,6.2265,7.825,2.582002,10.72499,-2.582002,10.72499,-6.2265,7.825,-7.115245,8.596269,-7.852963,9.525944,-8.4021,10.5667,-3.483416,14.47779,3.483416,14.47779,8.4021,10.5667,7.843716,9.532009,7.107238,8.603896,6.2265,7.825],operators=[0,2,2,1,2,2,1,2,2,2,2,1,2,2,3,0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v2=v1._nn(Group())
        v2.transform = (-0.5,.866025,-0.866025,-0.5,615.1666,164.8334)
        v3=v2._nn(Group())
        v3.transform = (10,0,0,-10,260,260)
        v3.add(Path(points=[2.8117,-1.046,3.123468,-0.207912,3.045125,.725565,2.598027,1.499964,2.15093,2.274363,1.381689,2.808951,.5,2.958,.5,4.5119,5.808309,4.764864,10.09066,8.944037,10.47299,14.2446,10.85532,19.54516,7.217057,24.29565,2,25.3078,2,25.8661,6.022108,25.325,9.653319,23.17724,12.06479,19.91305,14.47627,16.64886,15.46218,12.54684,14.7975,8.5433,18.59699,7.117153,21.65646,4.212323,23.27759,.491846,24.89871,-3.228631,24.94313,-7.447215,23.4007,-11.201,22.9172,-10.9218,24.64921,-5.897605,22.3543,-0.371505,17.57269,1.947677,12.79108,4.266859,7.03061,2.647789,4.1574,-1.8229,6.2265,7.825,2.582002,10.72499,-2.582002,10.72499,-6.2265,7.825,-7.115245,8.596269,-7.852963,9.525944,-8.4021,10.5667,-3.483416,14.47779,3.483416,14.47779,8.4021,10.5667,7.843716,9.532009,7.107238,8.603896,6.2265,7.825],operators=[0,2,2,1,2,2,1,2,2,2,2,1,2,2,3,0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v2=v1._nn(Group())
        v2.transform = (-0.5,-0.866025,.866025,-0.5,164.8334,615.1666)
        v3=v2._nn(Group())
        v3.transform = (10,0,0,-10,260,260)
        v3.add(Path(points=[2.8117,-1.046,3.123468,-0.207912,3.045125,.725565,2.598027,1.499964,2.15093,2.274363,1.381689,2.808951,.5,2.958,.5,4.5119,5.808309,4.764864,10.09066,8.944037,10.47299,14.2446,10.85532,19.54516,7.217057,24.29565,2,25.3078,2,25.8661,6.022108,25.325,9.653319,23.17724,12.06479,19.91305,14.47627,16.64886,15.46218,12.54684,14.7975,8.5433,18.59699,7.117153,21.65646,4.212323,23.27759,.491846,24.89871,-3.228631,24.94313,-7.447215,23.4007,-11.201,22.9172,-10.9218,24.64921,-5.897605,22.3543,-0.371505,17.57269,1.947677,12.79108,4.266859,7.03061,2.647789,4.1574,-1.8229,6.2265,7.825,2.582002,10.72499,-2.582002,10.72499,-6.2265,7.825,-7.115245,8.596269,-7.852963,9.525944,-8.4021,10.5667,-3.483416,14.47779,3.483416,14.47779,8.4021,10.5667,7.843716,9.532009,7.107238,8.603896,6.2265,7.825],operators=[0,2,2,1,2,2,1,2,2,2,2,1,2,2,3,0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(600)), float(float(s)/float(600)))

        return g


# Based loosely on Zero Consistency's Cognito Hazard Sign
# http://scp-wiki.wikidot.com/zero-consistency-art

class Cognitohazard(_Symbol):

    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc="x offset"),
        y = AttrMapValue(isNumber,desc="y offset"),
        size = AttrMapValue(isNumber,desc="scale"),
        background = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        fillColor = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        strokeColor = AttrMapValue(isColorOrNone,desc='the color of the stroke'),
        strokeWidth = AttrMapValue(isNumber,desc="width of stroke"),
        )

    def __init__(self,width=200.0,height=200.0,*args,**kw):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        #triangle
        g.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        g.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))
        #brain
        v1=g._nn(Group())
        v1.add(Path(points=[4681.2,3870.4,4518.3,3851,4343.9,3800.6,4266.3,3752.1,4212,3719.2,4194.6,3717.2,4105.4,3738.5,4031.7,3756,3963.9,3756,3820.4,3736.6,3527.6,3701.7,3291.1,3604.8,3233,3496.2,3211.7,3457.4,3194.2,3453.5,3031.4,3451.6,2823.9,3449.7,2587.4,3381.8,2331.5,3250,1965.1,3061.9,1629.7,2778.9,1567.6,2606.3,1536.6,2519.1,1523,2505.5,1402.8,2441.5,1145,2305.8,774.7,1918.1,637,1640.8,594.3,1553.6,584.6,1507,582.7,1386.8,582.7,1239.5,487.7,1130.9,257,871.2,144.6,590,140.7,274,138.8,120.8,146.5,66.5,173.7,16.1,208.6,-47.9,208.6,-47.9,154.3,-158.4,105.8,-257.2,100,-290.1,100,-466.6,100,-660.5,100,-664.3,187.2,-835,276.4,-1007.5,276.4,-1007.5,241.5,-1065.7,171.7,-1178.1,212.4,-1432.1,336.5,-1655.1,497.4,-1949.8,794,-2242.6,1028.6,-2341.4,1119.7,-2380.2,1272.9,-2382.1,1321.4,-2345.3,1354.4,-2322,1366,-2322,1412.5,-2345.3,1478.4,-2380.2,1616.1,-2380.2,1678.1,-2345.3,1724.6,-2320.1,1732.4,-2324,1868.1,-2471.3,1953.4,-2560.5,2050.3,-2641.9,2102.7,-2667.1,2168.6,-2700,2205.5,-2733,2232.6,-2789.2,2316,-2955.9,2674.6,-3120.7,2998.4,-3142.1,3198.1,-3155.7,3440.4,-3113,3601.4,-3035.5,3710,-2983.1,3770.1,-3082,3870.9,-3246.8,3998.9,-3372.8,4126.8,-3436.8,4252.8,-3500.8,4303.2,-3508.5,4382.7,-3477.5,4425.4,-3462,4448.6,-3469.7,4526.2,-3518.2,4576.6,-3549.3,4679.4,-3595.8,4753,-3619,4999.2,-3696.6,5390.9,-3663.6,5650.6,-3545.3,5751.4,-3498.8,5757.2,-3498.8,5815.4,-3529.8,5891,-3570.5,6121.7,-3574.4,6274.9,-3537.5,6412.5,-3504.6,6645.2,-3409.6,6779,-3330.1,6883.7,-3268.1,6955.4,-3326.3,7095,-3438.7,7432.3,-3502.7,7659.2,-3460,7825.9,-3429,7963.6,-3359.2,8079.9,-3246.7,8136.1,-3192.4,8237,-3111,8302.9,-3068.4,8677.1,-2826.1,8857.4,-2451.9,8789.5,-2060.3,8774,-1971.1,8886.4,-1885.8,9233.4,-1626,9506.8,-1246,9561.1,-949.4,9570.8,-899,9590.2,-869.9,9630.9,-850.5,9865.4,-728.3,9983.7,-55.5,9832.5,307,9787.9,411.7,9780.1,460.2,9776.3,661.8,9772.4,842.1,9760.8,925.5,9727.8,1030.2,9669.6,1210.5,9566.9,1412.1,9469.9,1542,9425.3,1600.2,9369.1,1704.9,9343.9,1774.7,9204.3,2158.6,8700.2,2800.3,8485,2864.3,8432.7,2879.8,8393.9,2908.9,8368.7,2949.6,8283.4,3087.3,7971.3,3341.2,7748.3,3455.6,7668.8,3496.3,7612.6,3509.9,7525.3,3509.9,7430.3,3511.8,7393.5,3521.5,7321.7,3568.1,7195.7,3651.5,6951.4,3729,6740.1,3756.2,6536.5,3779.5,6247.6,3765.9,6152.7,3727.1,6108.1,3709.6,6063.5,3707.7,5986,3721.3,5914.3,3734.9,5817.3,3732.9,5689.4,3717.4,5499.4,3694.1,5450.9,3752.3,5423.8,3783.3,5361.7,3822.1,5311.3,3839.5,5202.8,3876.2,4859.6,3893.7,4681.2,3870.4,5253.2,3635.8,5342.4,3595.1,5303.6,3558.3,5086.5,3480.7,5026.4,3459.4,4931.4,3410.9,4877.1,3374.1,4822.8,3337.3,4756.9,3308.2,4731.7,3308.2,4654.2,3308.2,4481.6,3232.6,4400.2,3162.8,4340.1,3112.4,4301.3,3094.9,4245.1,3094.9,4204.4,3093,4138.5,3081.3,4097.8,3065.8,4043.5,3048.3,3969.8,3042.5,3843.8,3050.3,3545.2,3067.7,3347.5,2992.1,3250.5,2819.6,3204,2738.2,3302.9,2809.9,3357.2,2848.7,3432.8,2895.2,3471.6,2910.7,3543.3,2941.7,3657.7,2949.5,3657.7,2924.3,3657.7,2916.5,3609.2,2873.9,3551.1,2827.4,3492.9,2782.8,3430.9,2718.8,3413.4,2687.8,3394,2658.7,3345.5,2616.1,3302.9,2598.6,3260.2,2579.2,3176.9,2517.2,3118.7,2460.9,3033.4,2381.4,2988.8,2356.2,2913.2,2338.8,2804.6,2315.5,2734.8,2278.7,2684.4,2214.7,2632.1,2150.7,2643.7,2144.9,2736.7,2185.6,2785.2,2206.9,2833.6,2218.6,2843.3,2212.7,2889.8,2183.6,2849.1,2121.6,2657.2,1923.8,2455.6,1718.3,2451.7,1714.4,2412.9,1751.3,2378,1782.3,2374.1,1803.6,2381.9,1912.2,2395.5,2094.4,2459.4,2206.9,2670.8,2410.5,2831.7,2567.5,2920.9,2687.7,2920.9,2749.8,2920.9,2763.4,2897.6,2745.9,2868.6,2713,2837.6,2680,2734.8,2590.9,2637.9,2515.3,2393.6,2327.2,2312.2,2210.9,2283.1,2013.2,2271.5,1931.8,2267.6,1927.9,2157.1,1883.3,2093.1,1858.1,1982.6,1796.1,1910.9,1745.6,1720.9,1615.7,1684.1,1640.9,1759.7,1846.4,1817.9,1999.6,1858.6,2036.4,1957.4,2020.9,2025.3,2009.3,2031.1,2011.2,2011.7,2036.4,1998.1,2051.9,1947.7,2084.9,1901.2,2108.1,1759.7,2176,1579.4,2133.3,1430.1,1997.6,1292.4,1873.5,1294.4,1848.3,1439.8,1923.9,1575.5,1993.7,1620.1,2003.4,1656.9,1966.5,1691.8,1931.6,1686,1885.1,1631.7,1784.3,1604.6,1733.9,1583.2,1662.2,1583.2,1623.4,1583.2,1542,1517.3,1402.4,1410.7,1253.1,1271.1,1059.2,1265.3,917.7,1389.4,669.5,1482.5,489.2,1472.8,446.5,1311.9,303.1,1236.3,237.2,1156.8,148,1137.4,107.3,1094.7,23.9,1083.1,-104,1108.3,-245.6,1121.9,-330.9,1119.9,-342.5,1071.5,-392.9,1042.4,-423.9,1011.4,-480.1,1001.7,-518.9,986,-590.7,1061.6,-520.9,1141.1,-449.2,1234.1,-431.7,1315.6,-474.4,1383.5,-511.2,1377.6,-476.4,1296.2,-385.2,1212.8,-290.2,1185.7,-203,1207,-90.5,1226.4,22,1261.3,76.2,1387.3,190.6,1451.3,248.8,1517.2,320.5,1534.6,353.5,1581.1,444.6,1571.4,562.9,1501.6,716,1389.2,968,1424.1,1113.4,1656.7,1353.9,1813.7,1516.8,2127.8,1737.8,2203.4,1737.8,2215,1737.8,2238.3,1704.8,2253.8,1666.1,2271.2,1625.4,2304.2,1565.3,2329.4,1534.3,2368.2,1480,2372.1,1468.4,2348.8,1416,2327.5,1363.7,2122,1121.3,2015.3,1024.4,1978.5,991.4,1961,985.6,1930,1001.1,1877.7,1030.2,1881.5,1129.1,1941.6,1243.4,1992,1334.5,1930,1297.7,1895.1,1278.3,1846.6,1224,1821.4,1175.6,1769.1,1080.6,1769.1,1005,1815.6,840.2,1842.7,753,1840.8,745.2,1790.4,640.5,1753.6,566.8,1732.2,481.5,1718.7,365.2,1707.1,252.7,1674.1,122.9,1621.8,-22.6,1579.1,-144.7,1522.9,-352.2,1495.8,-486,1443.5,-745.8,1441.5,-751.6,1383.4,-815.6,1300,-908.6,1007.3,-858.2,877.4,-732.2,755.3,-613.9,739.8,-565.4,739.8,-327,741.7,-86.6,766.9,6.4,914.3,303.1,1046.1,568.7,1084.9,692.8,1075.2,816.9,1067.5,902.2,1053.9,937.1,1011.2,981.7,877.4,1121.3,710.7,999.1,710.7,760.7,710.7,632.7,739.8,601.7,755.3,714.2,768.9,809.2,825.1,892.6,883.3,900.3,953.1,911.9,982.2,871.2,982.2,766.5,982.2,688.9,962.8,636.6,881.4,483.4,701,142.2,673.9,82.1,642.8,-49.8,580.8,-323.1,615.7,-590.7,735.9,-747.7,836.7,-879.5,947.2,-935.7,1139.2,-957.1,1333.1,-976.5,1400.9,-1003.6,1439.7,-1075.4,1472.7,-1143.3,1474.6,-1226.6,1441.6,-1238.3,1428,-1244.1,1383.4,-1230.5,1340.8,-1209.2,1300.1,-1187.9,1247.7,-1170.4,1228.4,-1170.4,1183.8,-1170.4,1094.6,-1216.9,1059.7,-1257.6,1036.4,-1284.7,1038.4,-1288.6,1083,-1277,1152.8,-1259.6,1278.8,-1298.3,1350.5,-1358.4,1424.2,-1418.5,1472.6,-1513.5,1505.6,-1655,1519.2,-1713.2,1556,-1817.9,1585.1,-1885.7,1645.2,-2017.6,1653,-2064.1,1621.9,-2118.4,1579.2,-2201.8,1480.4,-2176.6,1373.7,-2054.4,1298.1,-1967.2,1280.6,-1881.9,1317.5,-1773.3,1346.6,-1689.9,1300.1,-1734.5,1234.2,-1796.5,1203.2,-1905.1,1232.2,-1986.5,1261.3,-2069.9,1259.3,-2130,1226.4,-2159,1203.1,-2176.5,1177.9,-2172.6,1106.2,-2139.6,887.1,-2044.6,668,-1815.8,532.3,-1542.5,462.5,-1406.8,450.9,-1364.1,450.9,-1253.6,449,-1090.7,474.2,-1079.1,580.8,-1201.2,625.4,-1253.6,706.8,-1342.7,761.1,-1402.8,871.6,-1523,904.6,-1575.4,904.6,-1635.5,904.6,-1658.8,914.3,-1670.4,924,-1664.6,957,-1643.3,945.3,-1482.4,904.6,-1400.9,881.3,-1358.3,780.5,-1234.2,679.7,-1125.6,381.1,-807.6,303.6,-668.1,303.6,-456.7,303.6,-319,352.1,-212.4,464.5,-90.3,569.2,25.9,580.8,55,553.7,153.8,532.4,235.2,495.6,157.7,441.2,49.1,421.8,33.6,388.9,78.2,354,126.7,354,310.9,388.9,479.5,441.3,719.9,528.5,855.6,850.3,1196.8,1108.1,1468.2,1197.3,1543.8,1195.4,1491.5,1195.4,1481.8,1185.7,1441.1,1176,1398.4,1162.4,1340.2,1164.4,1295.7,1189.6,1214.2,1220.6,1107.6,1236.1,1194.8,1241.9,1243.3,1263.2,1315,1280.7,1357.7,1336.9,1491.5,1307.8,1631.1,1220.6,1652.4,1158.6,1667.9,1026.7,1586.5,908.5,1456.6,854.2,1398.4,805.7,1350,799.9,1350,794.1,1350,788.3,1377.1,788.3,1408.2,788.3,1522.6,916.3,1726.2,1125.6,1947.2,1373.8,2207,1589,2331.1,1833.2,2352.4,2060,2371.8,2160.8,2457.1,2133.7,2604.4,2120.1,2674.2,2085.2,2604.4,2063.9,2565.6,2029,2521,2005.7,2505.5,1951.4,2466.7,1808,2464.8,1778.9,2501.6,1745.9,2540.4,1771.2,2581.1,1887.5,2689.7,2201.6,2982.4,2661.1,3201.5,3008.1,3224.8,3192.3,3236.4,3186.5,3220.9,2973.2,3133.7,2794.8,3060,2616.5,2932.1,2564.1,2841,2525.3,2775.1,2602.9,2835.2,2703.7,2914.7,2734.7,2930.2,2973.2,3019.4,3085.6,3060.1,3219.4,3126,3271.8,3162.9,3380.4,3240.4,3456,3248.2,3611.1,3201.7,3733.2,3164.9,3729.4,3164.9,3679,3219.1,3655.7,3244.3,3582.1,3288.9,3516.1,3318,3397.8,3372.3,3442.4,3407.2,3582,3519.6,4043.4,3572,4181.1,3490.6,4280,3434.4,4278,3393.7,4177.2,3347.1,4130.7,3325.8,4074.5,3308.3,4051.2,3308.3,3977.5,3308.3,3983.3,3273.4,4059,3252.1,4171.4,3219.1,4196.6,3225,4353.7,3312.2,4479.7,3380.1,4518.5,3391.7,4621.3,3393.6,4689.2,3395.5,4743.4,3397.5,4743.4,3399.4,4743.4,3422.7,4592.2,3473.1,4491.4,3480.8,4382.8,3490.5,4365.4,3498.2,4365.4,3531.2,4365.4,3577.7,4489.5,3628.1,4669.8,3655.3,4826.6,3680.4,5183.4,3666.8,5253.2,3635.8,6914.7,3513.7,7071.7,3469.1,7252,3374.1,7317.9,3298.5,7370.3,3242.3,7374.1,3224.8,7360.6,3164.7,7352.8,3125.9,7352.8,3094.9,7360.6,3094.9,7383.9,3094.9,7447.8,3180.2,7476.9,3251.9,7500.2,3304.2,7509.9,3310.1,7562.2,3300.4,7694,3273.3,8013.9,3044.5,8141.9,2885.5,8322.2,2662.5,8281.5,2540.4,7975.2,2367.9,7794.9,2267.1,7760,2226.4,7777.4,2141.1,7791,2082.9,7825.9,2139.1,7878.3,2224.4,7944.2,2270.9,8138,2350.4,8335.8,2431.8,8388.1,2482.2,8388.1,2592.7,8388.1,2707.1,8434.6,2689.6,8601.4,2517.1,8894.1,2214.7,9183,1747.4,9183,1574.9,9183,1414,9173.3,1415.9,8987.2,1605.9,8841.8,1753.2,8808.8,1799.8,8783.6,1887,8748.7,2009.1,8611.1,2201.1,8510.2,2268.9,8405.5,2340.6,8388.1,2330.9,8469.5,2247.6,8605.2,2106.1,8678.9,1892.8,8589.7,1892.8,8574.2,1892.8,8506.3,1916.1,8440.4,1945.1,8225.2,2038.2,8000.3,2009.1,7969.3,1885,7955.7,1826.8,8004.2,1718.3,8060.4,1681.4,8099.2,1658.1,8101.1,1660.1,8089.5,1702.7,8052.7,1819,8054.6,1830.6,8107,1865.6,8153.5,1894.7,8172.9,1896.6,8264,1877.2,8547.1,1819,8960,1508.8,9119,1239.3,9159.7,1167.6,9167.5,1136.5,9159.7,1037.7,9153.9,962.1,9138.4,903.9,9111.2,869,9053,791.4,9016.2,793.4,8971.6,878.7,8932.8,952.4,8931,846,8931,716.1,8956.2,677.3,9093.9,584.3,9216,502.9,9241.2,454.4,9241.2,301.2,9241.2,136.4,9186.9,4.6,9018.2,-251.3,8936.8,-375.4,8857.3,-505.3,8841.8,-540.2,8810.8,-615.8,8805,-833,8834,-850.4,8845.6,-856.2,8853.4,-842.7,8853.4,-815.5,8853.4,-745.7,8983.3,-501.4,9049.2,-445.2,9159.7,-352.1,9248.9,-398.7,9318.7,-586.7,9429.2,-875.6,9299.3,-1211,8944.5,-1552.2,8708,-1779,8378.4,-1988.4,8192.3,-2031.1,8132.2,-2044.7,8039.1,-1982.6,8039.1,-1928.3,8039.1,-1879.8,8145.7,-1720.9,8198.1,-1689.8,8223.3,-1676.2,8308.6,-1643.3,8390,-1616.1,8659.5,-1523.1,8913.5,-1319.5,9020.1,-1108.2,9115.1,-922.1,9078.3,-925.9,8886.3,-1117.9,8620.7,-1383.5,8388,-1523.1,8265.9,-1492.1,8236.8,-1486.3,8201.9,-1449.4,8172.8,-1393.2,8095.3,-1247.8,8009.9,-1238.1,7827.7,-1352.5,7732.7,-1414.5,7726.9,-1426.2,7810.3,-1401,7911.1,-1371.9,7959.6,-1379.7,8013.9,-1434,8058.5,-1478.6,8062.4,-1494.1,8052.7,-1583.3,8013.9,-1897.4,7676.6,-2228.9,7348.9,-2275.4,7129.8,-2304.5,7036.8,-2207.5,7164.7,-2079.6,7199.6,-2046.7,7211.2,-2023.4,7195.7,-2023.4,7145.3,-2023.4,7027,-2147.5,6920.4,-2306.5,6765.3,-2545,6623.8,-2661.3,6420.2,-2719.4,6377.5,-2733,6212.7,-2750.4,6055.7,-2760.1,5716.4,-2781.4,5592.3,-2812.5,5489.6,-2903.6,5412,-2971.5,5528.3,-2934.6,5859.8,-2833.8,5970.3,-2880.3,5875.4,-3081.9,5786.2,-3271.9,5495.4,-3419.2,5160,-3450.3,4801.3,-3481.4,4512.5,-3322.4,4349.6,-3000.5,4281.7,-2866.7,4248.7,-2940.4,4219.6,-3012.1,4219.6,-3017.9,4268.1,-3122.6,4295.2,-3180.8,4316.6,-3242.8,4316.6,-3256.4,4316.6,-3326.2,4194.5,-3258.4,4062.6,-3114.9,3926.9,-2967.6,3849.3,-2806.6,3835.8,-2651.5,3828,-2544.9,3831.9,-2529.4,3870.7,-2502.2,3919.2,-2467.3,3934.7,-2471.2,4087.8,-2558.4,4283.6,-2668.9,4432.9,-2717.4,4681,-2750.3,4954.4,-2785.2,4999,-2798.8,5041.6,-2860.8,5117.2,-2967.4,5055.2,-3064.4,4886.5,-3099.2,4772.1,-3122.5,4853.5,-3147.7,4989.2,-3188.4,5097.8,-3147.7,5179.2,-3025.6,5210.2,-2977.1,5212.2,-2961.6,5188.9,-2866.6,5165.6,-2769.7,5165.6,-2756.1,5198.6,-2721.2,5218,-2699.9,5243.2,-2682.4,5256.8,-2682.4,5268.4,-2682.4,5336.3,-2643.6,5408,-2597.1,5526.3,-2519.6,5553.4,-2509.9,5689.1,-2500.2,5987.7,-2475,6175.7,-2397.4,6321.1,-2236.5,6379.3,-2170.6,6460.7,-2042.6,6443.2,-2042.6,6441.2,-2042.6,6390.8,-2087.2,6332.7,-2139.5,6179.5,-2283,6026.4,-2352.8,5877.1,-2352.8,5784,-2352.8,5745.3,-2343.1,5704.6,-2312.1,5598,-2228.7,5671.7,-2071.7,5848.1,-2013.5,5952.8,-1978.6,6065.2,-1870,6111.8,-1759.5,6127.3,-1720.7,6160.3,-1683.9,6189.4,-1674.2,6216.5,-1662.6,6344.5,-1654.8,6474.4,-1654.8,6776.9,-1654.8,6930,-1629.6,7096.8,-1554,7228.6,-1492,7333.3,-1546.3,7391.5,-1577.3,7461.3,-1629.7,7488.4,-1662.6,7534.9,-1714.9,7538.8,-1732.4,7529.1,-1833.2,7523.3,-1895.2,7523.3,-1945.6,7527.1,-1945.6,7558.1,-1945.6,7612.4,-1806,7612.4,-1730.4,7612.4,-1614.1,7554.2,-1528.8,7422.4,-1451.2,7368.1,-1420.2,7321.6,-1381.4,7321.6,-1367.9,7321.6,-1336.9,7418.5,-1193.4,7468.9,-1146.9,7490.2,-1129.4,7563.9,-1094.6,7633.7,-1067.4,7705.4,-1042.2,7814,-980.2,7878,-929.7,8019.5,-819.2,8085.5,-797.9,8180.4,-830.8,8273.5,-861.8,8304.5,-889,8370.4,-991.7,8424.7,-1077,8436.3,-1007.2,8455.7,-910.3,8424.7,-838.5,8343.2,-784.2,8271.5,-737.7,8368.4,-671.8,8608.8,-510.9,8794.9,-239.4,8829.8,-1,8839.5,59.1,8845.3,107.6,8841.4,105.6,8839.5,101.7,8806.5,39.7,8767.7,-32.1,8626.2,-305.5,8302.4,-627.3,8168.6,-627.3,8137.6,-627.3,8133.7,-615.7,8145.3,-522.6,8156.9,-439.2,8151.1,-408.2,8124,-365.5,8089.1,-313.2,8065.8,-427.6,8034.8,-578.8,7978.6,-687.4,7870,-803.7,7771.1,-910.3,7649,-976.2,7555.9,-976.2,7441.5,-976.2,7350.4,-848.3,7280.6,-588.5,7259.3,-509,7255.4,-505.2,7241.8,-549.7,7210.8,-658.3,7222.4,-799.8,7274.7,-902.6,7360,-1069.3,7336.8,-1177.9,7183.6,-1313.6,7086.7,-1402.8,6976.1,-1453.2,6801.7,-1490,6555.5,-1542.4,6297.6,-1519.1,6220.1,-1435.7,6198.8,-1412.4,6165.8,-1332.9,6150.3,-1261.2,6132.9,-1189.4,6070.8,-1022.7,6010.7,-892.8,5869.2,-590.3,5861.4,-561.3,5896.3,-479.8,5923.4,-415.8,5948.7,-402.3,6070.8,-390.6,6129,-384.8,6066.9,-349.9,5968,-297.5,5875,-307.2,5805.2,-377,5747,-433.2,5747,-439,5754.8,-574.8,5762.6,-702.7,5776.1,-737.7,5908,-989.7,6037.9,-1239.8,6051.5,-1278.6,6057.3,-1398.8,6063.1,-1501.6,6057.3,-1553.9,6026.3,-1619.8,5975.9,-1736.1,5884.8,-1835,5789.8,-1877.6,5712.2,-1912.5,5712.2,-1912.5,5537.8,-1858.2,5301.3,-1786.5,5115.2,-1792.3,5006.6,-1875.7,4917.4,-1943.6,4870.9,-2044.4,4886.4,-2137.4,4901.9,-2230.5,4936.8,-2261.5,4936.8,-2182,4936.8,-2013.3,5045.4,-1935.8,5258.6,-1949.4,5411.8,-1959.1,5487.4,-1994,5522.3,-2071.5,5580.5,-2199.5,5345.9,-2500,5121,-2585.3,4890.3,-2670.6,4388.2,-2604.7,4176.8,-2459.3,4136.1,-2432.2,4103.1,-2403.1,4103.1,-2395.3,4103.1,-2387.5,4165.1,-2366.2,4240.8,-2348.8,4506.4,-2284.8,4626.6,-2168.5,4626.6,-1972.7,4626.6,-1823.4,4587.8,-1732.3,4481.2,-1623.7,4359.1,-1501.6,4248.6,-1457,3870.5,-1381.4,3546.7,-1315.5,3490.5,-1286.4,3496.3,-1187.5,3513.7,-954.9,3511.8,-918,3478.8,-885.1,3445.8,-854.1,3443.9,-854.1,3443.9,-906.4,3443.9,-1051.8,3315.9,-1141,3127.9,-1127.4,3011.6,-1119.6,3063.9,-1162.3,3091,-1187.5,3145.3,-1212.7,3182.2,-1220.5,3221,-1226.3,3279.1,-1259.3,3312.1,-1290.3,3412.9,-1385.3,3585.5,-1459,3847.2,-1521,4283.4,-1623.7,4380.4,-1668.3,4452.1,-1792.4,4562.6,-1990.2,4452.1,-2189.8,4209.8,-2234.4,4062.5,-2261.6,4043.1,-2249.9,4048.9,-2127.8,4052.8,-2044.4,4045,-2015.4,4014,-1982.4,3973.3,-1941.7,3959.7,-2025.1,3915.1,-2302.3,3618.5,-2585.4,3290.8,-2662.9,3160.9,-2693.9,2866.2,-2678.4,2746,-2635.8,2530.8,-2556.3,2362.1,-2385.7,2344.7,-2228.7,2335,-2145.3,2336.9,-2137.6,2424.2,-2060,2472.7,-2015.4,2509.5,-1974.7,2505.6,-1970.8,2501.7,-1966.9,2457.1,-1972.7,2406.7,-1984.4,2284.6,-2011.5,2197.3,-1992.2,2094.6,-1914.6,1962.8,-1813.8,1988,-1904.9,2137.3,-2065.8,2185.8,-2118.1,2222.6,-2176.3,2222.6,-2201.5,2222.6,-2226.7,2249.7,-2292.6,2280.8,-2350.8,2354.5,-2482.6,2354.5,-2507.8,2284.7,-2507.8,2137.4,-2507.8,1825.2,-2156.9,1718.6,-1875.8,1697.3,-1817.6,1674,-1724.6,1668.2,-1668.4,1658.5,-1585,1662.4,-1559.8,1695.3,-1519.1,1732.1,-1474.5,1739.9,-1472.6,1780.6,-1497.8,1926,-1588.9,1999.7,-1620,2090.8,-1629.7,2189.7,-1639.4,2230.4,-1629.7,2410.7,-1556,2466.9,-1532.8,2484.4,-1536.6,2585.2,-1577.3,2726.7,-1635.5,2940,-1761.5,3038.9,-1846.8,3164.9,-1953.4,3199.8,-2063.9,3151.3,-2191.9,3131.9,-2246.2,3182.3,-2197.7,3382,-2011.6,3298.6,-1815.8,2936.1,-1618,2612.3,-1439.6,2529,-1354.3,2517.3,-1187.6,2507.6,-1053.8,2550.2,-951.1,2670.5,-813.4,2771.3,-699,3033,-524.5,3199.8,-462.5,3500.3,-350.1,3620.5,-417.9,3820.2,-819.2,3990.8,-1158.5,4091.6,-1214.7,4297.1,-1084.8,4485.2,-966.5,4554.9,-933.6,4620.9,-931.7,4679.1,-929.7,4682.9,-925.9,4655.8,-900.7,4605.4,-850.3,4498.8,-869.7,4368.9,-955,4145.9,-1100.4,4080,-1065.5,3907.5,-708.8,3843.5,-573.1,3777.6,-449,3762.1,-431.5,3736.9,-402.4,3736.9,-390.8,3771.8,-334.6,3795.1,-297.8,3812.5,-235.7,3812.5,-191.1,3812.5,-113.6,3766,-183.4,3738.9,-222.2,3686.5,-268.7,3645.8,-288.1,3579.9,-319.1,3570.2,-319.1,3508.1,-290.1,3413.1,-245.5,3327.8,-251.3,3207.6,-315.3,3079.7,-385.1,3056.4,-371.5,3056.4,-235.8,3056.4,-138.9,3023.4,-51.6,2973,-10.9,2949.7,10.4,2943.9,-10.9,2936.2,-156.3,2924.6,-377.3,2883.9,-456.8,2713.2,-594.4,2404.9,-838.7,2309.9,-1028.7,2375.9,-1259.4,2399.2,-1340.8,2366.2,-1402.9,2280.9,-1445.5,2085.1,-1544.4,1813.7,-1395.1,1681.8,-1114,1610.1,-958.9,1612,-708.8,1689.5,-472.3,1798.1,-138.9,1984.2,161.7,2213,376.9,2383.6,535.9,2509.6,605.7,2689.9,644.5,2895.4,687.1,2903.2,660,2732.5,506.8,2656.9,437,2569.6,342,2536.7,293.5,2505.7,245,2395.2,126.8,2292.4,29.8,2053.9,-195.1,1968.6,-352.1,1955.1,-584.8,1951.2,-681.7,1957,-755.4,1972.5,-792.2,1995.8,-848.4,1997.7,-842.6,2009.3,-693.3,2019,-559.5,2032.6,-509.1,2100.4,-373.4,2187.6,-195.1,2257.4,-117.5,2406.7,-32.2,2476.5,8.5,2546.3,80.3,2658.7,227.6,2751.8,347.8,2852.6,454.4,2906.9,491.3,3017.4,565,3178.3,601.8,3312.1,584.4,3525.4,555.3,3626.2,472,3705.7,266.4,3732.8,192.7,3808.4,58.9,3874.4,-30.2,4006.2,-212.4,4062.5,-322.9,4064.4,-398.6,4064.4,-429.6,4072.2,-452.9,4079.9,-452.9,4107,-452.9,4141.9,-359.9,4141.9,-286.2,4141.9,-202.8,4107,-133,3975.2,41.4,3845.3,213.9,3793,328.3,3793,444.7,3793,607.6,3940.3,826.6,4076.1,863.5,4268,913.9,4522,733.6,4644.1,456.4,4682.9,371.1,4682.9,468,4684.8,720,4444.4,962.4,4192.4,962.4,4047,962.4,4033.4,979.9,4099.3,1071,4184.6,1187.3,4328.1,1309.5,4438.6,1359.9,4500.6,1389,4611.2,1414.2,4723.6,1427.8,4824.4,1439.4,5060.9,1480.1,5247.1,1518.9,5632.9,1596.4,5708.5,1594.5,5881.1,1511.1,6007.1,1449.1,6249.5,1231.9,6303.7,1127.2,6350.2,1041.9,6371.6,1040,6371.6,1123.3,6371.6,1261,6230.1,1410.2,5896.6,1625.4,5710.5,1743.7,5706.6,1751.4,5724.1,1887.1,5745.4,2038.3,5737.7,2100.4,5681.5,2197.3,5650.5,2251.6,5596.2,2302,5514.8,2352.4,5446.9,2393.1,5319,2501.7,5227.9,2592.8,5067,2757.6,4973.9,2823.5,4904.1,2823.5,4878.9,2823.5,4890.5,2802.2,4950.6,2742.1,4993.2,2695.6,5055.3,2618,5088.2,2569.6,5156.1,2468.8,5245.3,2387.4,5423.6,2259.4,5621.4,2119.8,5652.4,2009.3,5545.8,1821.2,5474.1,1697.1,5369.4,1644.8,5146.4,1621.5,5043.6,1611.8,4855.6,1580.8,4729.6,1553.6,4376.8,1476.1,4367.1,1474.1,4318.6,1522.6,4208.1,1633.1,4316.7,1757.2,4551.2,1788.2,4655.9,1801.8,4588,1830.9,4506.6,1863.9,4349.5,1852.2,4260.4,1805.7,4161.5,1755.3,4130.5,1681.6,4116.9,1478.1,4105.3,1286.2,4091.7,1241.6,4006.4,1144.6,3979.3,1111.6,3919.2,1020.5,3874.6,939.1,3777.7,760.7,3682.7,671.6,3589.6,671.6,3552.8,671.6,3521.7,679.4,3521.7,689,3521.7,700.6,3543,749.1,3570.2,799.5,3620.6,894.5,3626.4,935.2,3607,1038,3589.6,1117.5,3572.1,1113.6,3545,1024.4,3512,917.8,3420.9,799.5,3341.4,762.7,3258,722,3145.6,722,2969.2,758.8,2678.4,818.9,2424.4,722,2052.2,405.9,1920.4,295.4,1899,285.7,1879.6,334.2,1844.7,425.3,2019.2,747.1,2224.7,970.1,2488.4,1259,2881.9,1466.4,3163,1466.4,3273.5,1466.4,3320,1445.1,3302.6,1402.4,3285.1,1353.9,3213.4,1317.1,2973,1224,2771.4,1148.4,2593,1051.5,2562,1001,2556.2,991.3,2596.9,1004.9,2655.1,1030.1,2711.3,1057.2,2887.7,1111.5,3046.7,1154.2,3298.7,1220.1,3343.3,1237.6,3389.9,1289.9,3459.7,1367.5,3459.7,1448.9,3393.8,1615.6,3343.4,1739.7,3343.4,1745.5,3374.4,1805.6,3419,1889,3578,1982,3795.1,2049.9,3983.2,2110,4060.7,2119.7,4239.1,2096.4,4326.3,2084.8,4351.5,2088.7,4372.9,2113.9,4396.2,2141,4392.3,2144.9,4347.7,2144.9,4268.2,2144.9,4167.4,2193.4,4070.5,2280.6,3954.2,2381.4,3870.8,2404.7,3704.1,2377.5,3564.5,2354.2,3455.9,2307.7,3397.8,2243.7,3351.3,2191.4,3362.9,2193.3,3477.3,2249.5,3630.5,2327.1,3748.7,2346.4,3843.7,2309.6,4002.7,2249.5,3971.7,2212.7,3677,2115.7,3347.4,2007.1,3221.4,1914.1,3223.3,1770.6,3223.3,1726,3229.1,1673.7,3238.8,1656.2,3252.4,1627.1,3244.6,1621.3,3200,1621.3,3091.4,1621.3,2891.7,1561.2,2709.5,1475.9,2610.6,1427.4,2525.3,1388.7,2521.4,1388.7,2498.1,1388.7,2519.5,1489.5,2560.2,1572.9,2692,1856,2938.3,2020.8,3124.4,1951,3203.9,1920,3174.8,1972.3,3091.4,2013,3052.6,2032.4,3015.8,2055.6,3008,2065.3,2967.3,2131.2,3184.4,2340.6,3403.5,2451.1,3525.6,2511.2,3572.2,2524.8,3696.3,2528.7,3799,2534.5,3865,2526.8,3915.4,2505.4,3954.2,2489.9,3987.1,2484.1,3987.1,2493.8,3987.1,2528.7,3909.6,2583,3812.6,2617.9,3760.3,2637.3,3709.9,2662.5,3702.1,2674.1,3663.3,2736.1,4043.3,2932,4171.3,2916.4,4215.9,2912.5,4229.5,2897,4246.9,2838.9,4258.5,2798.2,4332.2,2693.5,4423.3,2590.7,4508.6,2493.8,4597.8,2381.3,4621.1,2342.5,4665.7,2270.8,4665.7,2354.2,4665.7,2455,4636.6,2515.1,4518.4,2650.8,4349.7,2846.6,4342,2953.3,4493.2,3081.2,4675.4,3238.2,4983.7,3249.9,5383.1,3114.2,5654.5,3021.1,5918.2,2835,5978.3,2693.5,6007.4,2619.8,6011.3,2458.9,5984.1,2389.1,5974.4,2362,5972.5,2338.7,5982.2,2338.7,6009.3,2338.7,6059.8,2406.6,6083,2472.5,6117.9,2571.4,6172.2,2546.2,6265.2,2395,6325.3,2292.3,6381.5,2236,6521.1,2127.5,6804.2,1908.4,6914.7,1728.1,6821.6,1635.1,6780.9,1594.4,6678.1,1642.9,6532.7,1710.8,6364,1821.3,6255.5,1924,6160.5,2013.2,6178,1953.1,6212.9,1827.1,6307.9,1734,6546.4,1592.5,6711.2,1491.7,6812,1398.6,6827.5,1332.7,6833.3,1301.7,6825.6,1198.9,6806.2,1105.9,6765.5,888.8,6777.1,681.3,6839.1,545.6,6901.1,404.1,6899.2,260.6,6831.4,144.3,6802.3,95.8,6755.8,35.7,6726.7,12.5,6672.4,-28.2,6749.9,-16.5,6848.8,-1,6908.9,39.7,6949.6,113.4,7021.3,239.4,7019.4,239.4,7093.1,183.2,7226.9,82.4,7477,-167.7,7566.1,-284,7653.3,-400.3,7655.3,-406.1,7645.6,-514.7,7639.8,-576.7,7639.8,-627.1,7643.6,-627.1,7666.9,-627.1,7709.5,-499.2,7709.5,-429.4,7709.5,-272.4,7635.8,-161.8,7315.9,165.8,6897.1,592.3,6877.7,640.8,6951.4,1127.4,7040.6,1730.4,7032.8,1776.9,6815.7,2019.2,6621.8,2236.3,6604.4,2294.5,6701.3,2405,6734.2,2439.9,6794.3,2484.5,6838.9,2501.9,6937.8,2542.6,6920.3,2571.7,6798.2,2571.7,6714.8,2571.7,6691.6,2562,6612.1,2492.2,6476.4,2375.9,6431.8,2387.5,6290.3,2575.6,6228.3,2657,6141,2754,6098.4,2788.9,6013.1,2856.8,5964.6,2934.3,5978.2,2975,5991.8,3008,6183.7,3104.9,6323.3,3143.7,6480.3,3190.2,6621.9,3174.7,6780.8,3095.2,7038.7,2965.3,7374.1,2544.6,7395.4,2323.6,7401.2,2257.7,7387.7,2182.1,7350.8,2061.9,7288.8,1864.1,7288.8,1703.2,7352.7,1641.2,7389.5,1604.4,7389.5,1604.4,7383.7,1695.5,7375.9,1808,7416.6,1875.8,7470.9,1842.8,7490.3,1831.2,7532.9,1782.7,7565.9,1732.3,7707.4,1526.8,7755.9,1212.7,7662.8,1104.1,7616.3,1051.8,7498,1113.8,7339,1197.2,7246,1197.2,7178.1,1115.7,7119.9,1045.9,7110.2,918,7156.8,828.8,7172.3,797.8,7259.6,704.7,7352.6,621.3,7445.7,536,7548.4,429.4,7579.4,380.9,7635.6,293.7,7625.9,367.4,7608.4,487.6,7542.5,598.1,7397.1,759,7280.8,887,7261.4,916,7267.2,968.4,7276.9,1061.5,7346.7,1061.5,7527,964.5,7953.5,733.8,8265.7,353.8,8308.3,12.6,8323.8,-113.4,8354.8,-41.7,8453.7,177.4,8327.7,479.8,8009.7,788.1,7837.2,956.8,7817.8,997.5,7843,1119.6,7874,1259.2,7868.2,1425.9,7831.3,1534.5,7813.9,1586.8,7742.1,1703.2,7672.3,1794.3,7525,1988.2,7492,2067.7,7521.1,2153,7569.6,2304.2,7561.8,2370.1,7478.4,2511.7,7389.2,2662.9,7379.5,2715.3,7441.6,2748.2,7495.9,2777.3,7749.9,2761.8,7860.4,2723,7959.3,2686.2,7965.1,2705.6,7874,2773.4,7742.2,2874.2,7556,2907.2,7369.9,2862.6,7327.2,2852.9,7276.8,2849,7257.5,2854.8,7218.7,2866.4,7166.4,2963.4,7117.9,3114.6,7071.4,3258.1,7019,3341.4,6953.1,3376.3,6860,3424.8,6852.3,3409.3,6924,3316.2,6993.8,3225.1,7005.4,3184.4,6974.4,3135.9,6958.9,3112.6,6943.4,3116.5,6887.2,3161.1,6772.8,3246.4,6623.5,3308.4,6520.8,3308.4,6406.4,3308.4,6228,3250.2,6051.6,3155.2,5977.9,3114.5,5896.5,3075.7,5873.2,3068,5844.1,3058.3,5753,3085.4,5584.3,3153.3,5450.5,3207.6,5272.2,3267.7,5192.7,3285.1,5045.3,3320,5148.1,3364.6,5386.6,3465.4,5793.7,3539.1,5972.1,3513.9,6098.1,3494.5,6084.5,3457.7,5931.4,3403.4,5819,3362.7,5745.3,3308.4,5770.5,3281.3,5788,3267.7,6127.2,3349.2,6173.8,3378.2,6208.7,3401.5,6218.4,3422.8,6212.6,3469.3,6206.8,3525.5,6212.6,3533.3,6274.7,3544.9,6381.5,3566,6796.4,3544.7,6914.7,3513.7,9433.1,1191.1,9475.7,1101.9,9524.2,974,9541.7,904.2,9574.7,762.7,9580.5,563,9553.3,545.5,9541.7,539.7,9504.8,553.3,9469.9,574.6,9435,595.9,9373,613.4,9334.2,613.4,9281.8,613.4,9252.8,625,9225.6,661.9,9186.8,712.3,9245,879,9281.8,985.6,9307,1103.9,9314.8,1198.9,9318.7,1282.3,9330.3,1350.1,9338.1,1350.1,9347.8,1350,9388.5,1278.3,9433.1,1191.1,9487.4,427.2,9557.2,382.6,9623.1,279.9,9658,157.7,9704.5,-3.2,9689,-317.3,9625,-489.8,9553.3,-689.5,9487.4,-695.3,9425.3,-509.2,9404,-449.1,9373,-400.6,9336.1,-373.5,9305.1,-352.2,9266.3,-307.6,9250.8,-276.6,9221.7,-224.3,9223.7,-212.6,9283.8,-80.8,9342,49.1,9345.8,76.2,9347.8,268.2,9347.8,475.6,9396.3,464,9423.4,458.2,9464.1,440.8,9487.4,427.2,8570.4,-2073.8,8589.8,-2126.1,8584,-2376.3,8562.6,-2362.7,8552.9,-2356.9,8543.2,-2331.7,8543.2,-2308.4,8543.2,-2285.1,8521.9,-2215.3,8496.7,-2153.3,8450.2,-2042.8,8504.5,-2042.8,8535.5,-2042.8,8562.6,-2056.3,8570.4,-2073.8,8426.9,-2248.3,8471.5,-2397.6,8479.2,-2626.4,8440.5,-2661.2,8419.2,-2678.7,8409.5,-2657.3,8390.1,-2550.7,8376.5,-2479,8345.5,-2378.2,8320.3,-2325.8,8273.8,-2228.9,8312.6,-2174.6,8333.9,-2145.5,8359.1,-2120.3,8368.8,-2120.3,8378.4,-2120.3,8403.6,-2178.5,8426.9,-2248.3,8097.3,-2186.2,8097.3,-2279.3,7882.1,-2494.5,7597.1,-2686.4,7420.7,-2804.7,7312.1,-2855.1,7230.7,-2857,7160.9,-2857,7153.2,-2837.6,7186.1,-2748.4,7201.6,-2709.6,7199.7,-2686.4,7176.4,-2651.5,7160.9,-2626.3,7139.6,-2605,7131.8,-2605,7122.1,-2605,7100.8,-2655.4,7081.4,-2715.5,7052.3,-2806.6,7019.4,-2853.1,6906.9,-2965.6,6691.7,-3178.9,6383.4,-3326.2,6088.8,-3353.4,5974.4,-3363.1,5949.2,-3361.2,5910.4,-3330.2,5865.8,-3293.3,5939.5,-3196.4,5980.2,-3144.1,6034.5,-3060.7,6061.6,-3014.2,6117.8,-2911.5,6176,-2876.6,6286.5,-2876.6,6521.1,-2876.6,6887.5,-2671.1,6984.4,-2483.1,7009.6,-2436.6,7023.2,-2430.7,7112.4,-2430.7,7279.1,-2430.7,7531.2,-2359,7758,-2248.5,7998.4,-2130,8097.3,-2110.6,8097.3,-2186.2,8302.8,-2645.7,8314.4,-2781.4,8312.5,-2791.1,8267.9,-2833.8,8219.4,-2878.4,8205.8,-2738.8,8200,-2661.3,8176.7,-2560.5,8155.4,-2513.9,8116.6,-2428.6,8161.2,-2368.5,8203.9,-2310.3,8248.5,-2407.2,8273.7,-2463.5,8297,-2560.4,8302.8,-2645.7,8087.6,-2608.9,8140,-2787.3,8124.4,-2936.5,8046.9,-2971.4,7981,-3000.5,7981,-3002.4,7981,-2919.1,7981,-2878.3,7967.4,-2795,7951.9,-2731,7920.9,-2618.6,7975.2,-2562.4,8004.3,-2533.3,8033.4,-2508.1,8041.1,-2508.1,8050.8,-2508,8070.2,-2552.7,8087.6,-2608.9,2657.2,-2723.2,2955.8,-2826,3252.4,-2822.1,3529.6,-2709.6,3708,-2637.9,3729.3,-2709.6,3564.5,-2816.2,3366.7,-2940.3,3089.5,-2984.9,2864.6,-2926.7,2728.9,-2891.8,2533.1,-2802.6,2455.5,-2740.6,2414.8,-2707.7,2410.9,-2699.9,2436.1,-2682.4,2473,-2657.4,2455.6,-2655.4,2657.2,-2723.2,7862.7,-2765.9,7876.3,-2812.4,7884,-2876.4,7880.1,-2909.4,7874.3,-2969.5,7758,-2921,7575.7,-2845.4,7573.8,-2835.7,7703.7,-2756.2,7765.8,-2717.4,7822,-2686.4,7827.8,-2684.4,7835.6,-2682.5,7851.1,-2719.4,7862.7,-2765.9,7860.8,-3062.5,7932.5,-3076.1,7936.4,-3089.6,7884.1,-3138.1,7845.3,-3173,7837.6,-3173,7709.6,-3142,7548.7,-3103.2,7263.7,-2996.6,7263.7,-2975.2,7263.7,-2965.5,7308.3,-2942.3,7362.6,-2920.9,7461.5,-2884.1,7630.2,-2967.5,7721.2,-3012.1,7825.9,-3054.8,7860.8,-3062.5,7238.5,-3076.1,7294.7,-3105.2,7414.9,-3153.7,7506,-3184.7,7657.2,-3235.1,7666.9,-3240.9,7610.7,-3252.6,7411,-3291.4,7095,-3215.8,7056.2,-3116.9,7046.5,-3089.7,7104.7,-3006.4,7126,-3016.1,7131.8,-3019.9,7184.2,-3047,7238.5,-3076.1],operators=[0,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,3,0,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,1,1,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,3,0,2,2,2,2,2,1,1,2,2,2,3,0,2,2,2,2,2,2,2,1,1,2,3,0,2,2,2,1,1,2,3,0,2,2,2,1,1,2,2,3,0,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,3,0,2,1,1,2,1,1,1,1,2,3,0,2,2,2,1,1,2,2,3,0,2,2,2,2,2,2,3,0,2,1,1,2,2,2,3,0,2,2,2,2,1,1,2,3,0,2,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v1.add(Path(points=[8518,1503.2,8461.8,1460.6,8407.5,1309.3,8407.5,1202.7,8407.5,1138.7,8339.6,1167.8,8256.2,1202.7,8128.3,1202.7,8099.2,1167.8,8081.8,1148.4,8095.3,1134.8,8161.2,1109.6,8419.1,1012.7,8646,638.5,8613,371,8607.2,318.7,8595.6,252.7,8587.8,225.6,8576.2,177.1,8576.2,177.1,8618.8,214,8680.8,268.3,8725.4,440.8,8708,563,8702.2,617.3,8657.6,776.3,8609.1,915.9,8512.2,1206.7,8500.5,1325,8562.6,1451,8583.9,1495.6,8601.4,1534.4,8601.4,1538.2,8601.4,1555.5,8562.6,1540,8518,1503.2],operators=[0,2,1,1,2,2,2,2,2,2,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v1.add(Path(points=[5123.3,1134.8,5169.8,1082.5,5301.7,1016.5,5526.6,929.3,5850.4,805.2,5999.6,714.1,6052,613.3,6112.1,497,6067.5,210,5974.5,117,5931.8,76.3,5910.5,70.5,5765.1,70.5,5579,70.5,5553.8,86,5482,254.7,5431.6,367.1,5325,485.4,5224.1,537.8,5183.4,557.2,5146.6,574.6,5140.7,574.6,5132.9,574.6,5167.8,530,5214.4,475.7,5326.8,347.7,5412.2,179.1,5412.2,84.1,5412.2,20.1,5398.6,-1.2,5311.4,-80.7,5257.1,-131.1,5191.2,-212.5,5164.1,-261,5078.8,-412.2,5074.9,-412.2,4890.7,-319.2,4766.6,-257.1,4694.9,-202.9,4588.3,-92.4,4437.1,64.6,4340.1,138.3,4251,159.6,4194.8,173.2,4194.8,173.2,4272.3,95.6,4316.9,51,4386.7,-34.3,4429.3,-96.3,4537.9,-255.3,4599.9,-309.6,4743.4,-367.7,5057.5,-495.7,5131.1,-615.9,5071,-902.8,5041.9,-1042.4,4995.4,-1127.7,4896.5,-1224.6,4851.9,-1269.2,4819,-1311.8,4824.8,-1315.7,4844.2,-1337,5022.5,-1197.4,5084.6,-1114.1,5179.6,-982.3,5216.4,-831,5199,-633.3,5187.4,-489.8,5191.2,-462.7,5230,-381.3,5288.2,-263,5406.4,-144.8,5528.6,-84.7,5608.1,-45.9,5656.5,-38.2,5800,-38.2,6011.3,-36.3,6104.4,-75,6276.9,-236,6420.4,-367.8,6505.7,-484.2,6606.5,-685.8,6693.7,-860.3,6693.7,-858.4,6594.9,-994.1,6523.2,-1091,6532.9,-1125.9,6614.3,-1063.9,6709.3,-990.2,6846.9,-953.4,6932.3,-976.7,6969.1,-986.4,7004,-992.2,7007.9,-986.4,7021.5,-972.8,6911,-874,6843.1,-839.1,6798.5,-813.9,6773.3,-777.1,6732.6,-670.4,6639.5,-426.1,6527.1,-278.8,6240.2,-24.8,6117.9,84,6172.2,186.8,6247.8,334.1,6259.4,553.2,6197.4,683.1,6117.9,846,5972.5,923.5,5528.5,1034,5379.2,1070.8,5218.3,1117.4,5171.8,1138.7,5086.5,1175.5,5123.3,1134.8],operators=[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,1,1,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v1.transform = (.029,0,0,-0.029,155,355)

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(600)), float(float(s)/float(600)))

        return g



#"RADIOACTIVE", "BIOHAZARD", "COGNITOHAZARD", "INFOHAZARD" and "HOSTILE".

# based loosly on a logo that appears on "Memetics and Infohazards Division Orientation | SCP education"
# by Eastside Show SCP
# https://www.youtube.com/watch?v=MKxLBl16DiQ

class Infohazard(_Symbol):

    #fix later!

    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc="x offset"),
        y = AttrMapValue(isNumber,desc="y offset"),
        size = AttrMapValue(isNumber,desc="scale"),
        background = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        fillColor = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        strokeColor = AttrMapValue(isColorOrNone,desc='the color of the stroke'),
        strokeWidth = AttrMapValue(isNumber,desc="width of stroke"),
        )

    def __init__(self,width=200.0,height=200.0,*args,**kw):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        #triangle
        g.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        g.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))

        #"safe" padlock
        #g.transform = (1,0,0,-1,0,200)
        v2=g._nn(Group())
        v2.add(Path(points=[117.7,54.5,117.7,50.7,114.7,47.5,110.7,47.5,89.3,47.5,85.5,47.5,82.3,50.5,82.3,54.5,82.3,82,117.7,82,117.7,54.5],operators=[0,2,1,2,1,1,1,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=None))
        v2.add(Path(points=[137.6,82.5,137.6,82.2,137.6,79.2,137.6,47.5,137.6,36.6,128.8,27.6,117.7,27.6,82.3,27.6,71.3,27.6,62.4,36.4,62.4,47.5,62.4,78.5,62.4,82.3,62.4,82.6,52,84.4,44,93.5,44,104.5,44,142,44,154.3,54,164.2,66.2,164.2,134.1,164.2,146.4,164.2,156.3,154.2,156.3,142,156.3,104.4,156.3,93.2,148.2,84.1,137.6,82.5,82.3,54.5,82.3,50.6,85.5,47.5,89.3,47.5,110.8,47.5,114.7,47.5,117.8,50.7,117.8,54.5,117.8,82,82.3,82,82.3,54.5,99.9,148.8,85.7,148.8,74.1,137.2,74.1,123,74.1,108.8,85.7,97.2,99.9,97.2,114.1,97.2,125.7,108.8,125.7,123,125.7,137.2,114.1,148.8,99.9,148.8],operators=[0,1,1,1,2,1,2,1,1,1,2,1,2,1,2,1,2,3,0,2,1,2,1,1,1,3,0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v2.transform = (0.60,0,0,0.60,234,112)
        v1=g._nn(Group())
        v1.transform = (.3827,-0.9239,.9239,.3827,-51.9271,168.1886)
        v1.add(Ellipse(99.9,123,18,18,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        #g.add(Path(points=[99.9,97.1,85.7,97.1,74.1,108.7,74.1,122.9,74.1,137.1,85.7,148.7,99.9,148.7,114.1,148.7,125.7,137.1,125.7,122.9,125.7,108.7,114.1,97.1,99.9,97.1,99.9,140.9,90,140.9,81.9,132.9,81.9,122.9,81.9,112.9,89.9,104.9,99.9,104.9,109.9,104.9,117.9,112.9,117.9,122.9,117.9,132.9,109.8,140.9,99.9,140.9],operators=[0,2,2,2,2,3,0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=Color(1,1,1,1)))
        v1.transform = (0.60,0,0,0.60,234,112)

        #humanoid figure
        v0=g._nn(Group())
        v0.transform = (0.65,0,0,0.65,232,160)
        #v0.add(Path(points=[95.872,81.671,118.42,81.671,136.71,63.387,136.71,40.835,136.71,18.284,118.42,0,95.872,0,73.319,0,55.038,18.284,55.038,40.835,55.038,63.387,73.319,81.671,95.872,81.671],operators=[0,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=Color(0,0,0,1)))
        v0.add(NoStrokePath(strokeDashArray=None,strokeWidth=0,strokeMiterLimit=0,operators=[0,3],strokeOpacity=1,strokeLineJoin=0,points=[95.872,40.835],fillOpacity=1,autoclose=None,strokeColor=None,strokeLineCap=0,isClipPath=0,fillColor=self.strokeColor))
        v0.add(Path(points=[95.872,40.835],operators=[0],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=None))
        v0.add(Path(points=[52.173,90.683,23.256,90.683,0,114.27,0,143.68,0,269.06,0,293.43,35.673,293.43,35.673,269.06,35.673,154.42,44.118,154.42,44.118,468.32,44.118,500.91,91.621,499.95,91.621,468.32,91.621,286.1,99.803,286.1,99.803,468.32,99.803,499.95,147.57,500.91,147.57,468.32,147.57,154.42,155.81,154.42,155.81,269.06,155.81,293.62,191.3,293.62,191.24,269.06,191.24,144.43,191.24,117.31,170.17,90.739,138.42,90.739,52.173,90.683],operators=[0,2,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,2,1,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(600)), float(float(s)/float(600)))

        return g

#"RADIOACTIVE", "BIOHAZARD", "COGNITOHAZARD", "INFOHAZARD" and "HOSTILE".

# Based loosely on Zero Consistency's Hostile Object Sign
# http://scp-wiki.wikidot.com/zero-consistency-art

class Hostile(_Symbol):

    #fix later!

    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc="x offset"),
        y = AttrMapValue(isNumber,desc="y offset"),
        size = AttrMapValue(isNumber,desc="scale"),
        background = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        fillColor = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        strokeColor = AttrMapValue(isColorOrNone,desc='the color of the stroke'),
        strokeWidth = AttrMapValue(isNumber,desc="width of stroke"),
        )

    def __init__(self,width=200.0,height=200.0,*args,**kw):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        #g.add(Path(points=[60.1,96,60.6,95.9,61,95.9,61.5,96,62,96,64.4,95.8,66.6,97.2,67.5,99.4,74,114.8,79.7,125.7,114.8,106.5,115.6,106,116.5,105.8,117.4,105.8,117.9,105.8,118.5,105.9,119,106,120.4,106.4,121.6,107.4,122.3,108.7,133.7,130,153,120.1,149.5,93.7,148.3,84.6,140.9,77.9,131.9,77.6,128.3,78.1,123,38.7,121.8,29.9,113.8,23.7,105,24.8,72.1,33,68.2,34,65.7,37.7,66.2,41.7,68.7,60.4,68.8,61.4,69.8,62.1,70.8,62,76.8,61.2,77.8,61.1,78.5,60.1,78.4,59.1,77.5,52.1,76.9,47.2,80,42.6,84.8,41.5,99.5,38.1,105.3,37.3,110.7,41.4,111.5,47.3,115.8,79.8,57.6,87.6,49.9,88.7,46.7,91,45.9,97.1,58.5,96.2,60.1,96],operators=[0,2,1,2,1,1,1,2,2,2,1,1,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=Color(1,1,1,1)))
        #g.add(Path(points=[119.8,147.1,113.8,124,79.7,134.7,77,135.6,74.1,134.2,73,131.6,61.2,103.5,45.7,104.6,42.2,138.4,41.7,143.3,43.1,148.2,46.3,152,49.4,155.8,53.8,158.2,58.7,158.7,126.2,165.7,131.1,166.2,136,164.8,139.8,161.6,143.6,158.5,146,154.1,146.5,149.2,146.8,146.1,126.5,151,123.6,151.8,120.6,150,119.8,147.1],operators=[0,1,1,2,1,1,1,2,2,1,2,2,1,1,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=Color(1,1,1,1)))
        #g.add(Path(points=[160.4,120.4,156.7,92.7,155.1,80.9,146.1,72,134.6,70.5,130.3,37.8,128.6,24.9,116.7,15.8,103.9,17.5,70.4,25.9,62.9,27.8,58,35,59,42.7,61.5,61.4,62.2,66.5,66.8,70,71.9,69.3,77.9,68.5,82.9,67.8,86.5,63.2,85.9,58.2,85,51.2,84.9,50.1,85.6,49,86.7,48.8,100.9,45.5,102.6,45.3,104.2,46.6,104.4,48.3,107.7,73.5,56.8,80.3,43.7,82.2,38.2,88.6,38.5,101.8,38.6,102.5,34.9,137.5,34.2,144.4,36.2,151.2,40.6,156.5,45,161.8,51.1,165.2,58,165.9,125.5,172.9,126.4,173,127.3,173,128.2,173,134.1,173,139.8,171,144.5,167.2,149.8,162.8,153.2,156.7,153.9,149.8,154.5,144.1,154.7,142.3,154,140.5,152.6,139.4,151.2,138.2,149.4,137.8,147.7,138.2,126.6,143.3,120.9,121.6,128,134.9,129,136.8,130.9,137.8,132.9,137.8,133.7,137.8,134.6,137.6,135.4,137.2,157.5,125.9,159.5,125,160.7,122.7,160.4,120.4,126.5,151,146.8,146.1,146.5,149.2,146,154.1,143.6,158.5,139.8,161.6,136,164.7,131.1,166.2,126.2,165.7,58.7,158.7,53.8,158.2,49.4,155.8,46.3,152,43.2,148.2,41.7,143.3,42.2,138.4,45.7,104.6,61.2,103.5,73,131.6,74.1,134.2,77,135.6,79.7,134.7,113.8,124,119.8,147.1,120.6,150,123.6,151.8,126.5,151,133.6,130,122.2,108.7,121.5,107.4,120.3,106.4,118.9,106,118.4,105.8,117.8,105.8,117.3,105.8,116.4,105.8,115.5,106,114.7,106.5,79.6,125.7,73.9,114.8,67.4,99.4,66.5,97.2,64.3,95.9,61.9,96,61.4,96,61,95.9,60.5,95.9,60,96,58.4,96.2,45.8,97.1,46.6,91,49.8,88.7,57.5,87.6,115.7,79.8,111.4,47.3,110.6,41.5,105.3,37.4,99.4,38.1,84.7,41.5,79.9,42.6,76.7,47.2,77.4,52.1,78.3,59.1,78.4,60.1,77.7,61.1,76.7,61.2,70.7,62,69.7,62.1,68.7,61.4,68.6,60.4,66.1,41.7,65.6,37.7,68.1,34,72,33,104.9,24.7,113.7,23.6,121.7,29.9,122.9,38.6,128.1,78,131.7,77.5,140.7,77.8,148.1,84.5,149.3,93.6,152.8,120,133.6,130],operators=[0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,2,1,1,1,2,2,1,2,3,0,1,1,2,2,1,2,2,1,1,1,2,1,1,2,3,0,1,2,2,2,1,1,1,2,1,2,1,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=Color(.003922,.003922,.003922,1)))

        vt=g._nn(Group())
        vt.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        vt.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))
        vt.scale(float(float(s)/float(45)), float(float(s)/float(38)))
        g.add(vt)        

        #g.transform = (2,0,0,1,200,320)

        #def __init__(self,width=1280.0,height=1600.0,*args,**kw):
        #self.transform = (1,0,0,1,0,0)
        v0=g._nn(Group())
        ##v0.transform = (1,0,0,1,0,0)
        #v0.transform = (1.25,0,0,-1.25,0,1600)
        #v0.scale(float(float(s)/float(120)), float(float(s)/float(120)))

        #v1=v0._nn(Group())
        #v1.transform = (.1,0,0,-0.1,0,1280)
        #v1.transform = (.05,0,0,0.05,0,1280)
        ##v1.transform = (.05,0,0,0.05,320,280)
        v0.add(Path(points=[4481,12790,3125,12709,1982,12266,1145,11494,843,11216,570,10865,357,10483,171,10147,78,9900,36,9625,-58,9005,51,8043,306,7250,362,7074,439,7014,481,6981,543,6919,577,6877,693,6733,751,6616,890,6245,970,6034,973,6021,978,5925,987,5730,943,5534,785,5055,625,4571,615,4521,631,4290,659,3881,755,3721,990,3690,1031,3685,1126,3681,1200,3681,1419,3681,1549,3714,1606,3784,1652,3839,1723,3854,1945,3854,2189,3855,2384,3824,2565,3755,2769,3679,2894,3549,2915,3394,2921,3350,2918,3335,2896,3291,2860,3221,2838,3118,2846,3064,2860,2968,2933,2911,3051,2902,3120,2897,3140,2942,3150,2966,3166,3033,3175,3091,3210,3318,3235,3381,3305,3414,3338,3430,3346,3430,3379,3418,3410,3406,3417,3398,3428,3355,3435,3327,3444,3241,3447,3163,3453,3021,3415,2943,3387,2885,3376,2848,3373,2798,3365,2701,3375,2690,3497,2656,3574,2635,3615,2616,3688,2569,3826,2479,3868,2464,3966,2469,4010,2471,4020,2500,4031,2655,4051,2926,4064,2982,4114,3016,4147,3037,4196,3037,4220,3015,4256,2983,4263,2936,4256,2794,4249,2670,4250,2658,4271,2618,4344,2472,4493,2432,4652,2517,4759,2574,4777,2616,4799,2855,4822,3099,4833,3185,4842,3204,4852,3222,4852,3222,4870,3204,4890,3183,4923,3089,4942,3000,4949,2962,4958,2944,4966,2947,4991,2956,5070,2723,5085,2594,5095,2513,5109,2494,5177,2474,5288,2442,5468,2477,5549,2547,5618,2606,5634,2666,5604,2754,5595,2781,5591,2805,5596,2810,5601,2815,5629,2810,5660,2798,5690,2787,5723,2777,5733,2777,5745,2776,5761,2757,5777,2726,5791,2698,5828,2651,5859,2620,5927,2552,6013,2515,6102,2515,6151,2515,6163,2519,6189,2544,6245,2598,6253,2640,6256,2895,6258,3096,6261,3133,6279,3191,6313,3298,6386,3380,6449,3380,6486,3380,6534,3321,6554,3251,6563,3217,6575,3128,6580,3052,6595,2821,6635,2742,6755,2705,6917,2655,7161,2836,7186,3024,7191,3056,7183,3100,7156,3197,7114,3350,7112,3397,7144,3465,7256,3697,7575,3884,7984,3956,8043,3966,8080,3967,8125,3960,8206,3947,8228,3939,8410,3858,8495,3819,8600,3779,8644,3768,8745,3742,8787,3750,8959,3825,9172,3919,9264,3983,9301,4065,9328,4123,9325,4151,9275,4295,9207,4492,9125,4768,9086,4930,9022,5199,9016,5253,9015,5510,9015,5716,9018,5757,9037,5845,9070,5995,9122,6153,9173,6260,9198,6312,9248,6445,9284,6554,9321,6664,9366,6782,9385,6816,9438,6910,9509,6981,9634,7064,9894,7237,10048,7474,10145,7853,10264,8317,10270,8947,10164,9640,10129,9869,10088,10040,10046,10138,9707,10926,9010,11595,8020,12084,7250,12464,6426,12687,5465,12775,5264,12794,4688,12802,4481,12790,2920,7779,3077,7765,3189,7745,3333,7705,3498,7660,3615,7608,3795,7500,4137,7294,4315,7138,4397,6972,4430,6906,4434,6891,4433,6822,4432,6677,4366,6553,4170,6331,3954,6084,3660,5909,3317,5821,3171,5783,3034,5768,2845,5769,2458,5770,2107,5853,1903,5991,1613,6188,1450,6551,1481,6936,1514,7356,1746,7668,2098,7762,2220,7794,2650,7803,2920,7779,7850,7778,7950,7766,8065,7727,8147,7679,8232,7629,8366,7491,8422,7394,8479,7297,8534,7137,8551,7021,8569,6895,8558,6688,8527,6568,8435,6215,8194,5964,7853,5865,7418,5738,6945,5738,6570,5866,6450,5907,6243,6014,6141,6087,5977,6205,5784,6409,5690,6564,5516,6851,5601,7059,6015,7355,6352,7595,6627,7715,6957,7765,7172,7798,7641,7805,7850,7778,5202,6099,5223,6094,5251,6079,5265,6067,5313,6024,5858,5066,5886,4975,5911,4893,5914,4811,5893,4770,5842,4671,5688,4654,5533,4730,5467,4762,5443,4793,5375,4930,5360,4960,5336,5000,5323,5017,5265,5092,5112,5129,4996,5096,4921,5074,4868,5021,4811,4911,4734,4763,4658,4703,4519,4681,4448,4669,4368,4681,4330,4708,4294,4734,4270,4788,4270,4841,4270,4943,4314,5036,4585,5510,4887,6037,4915,6079,4983,6099,5027,6112,5157,6112,5202,6099],operators=[0,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v0.add(Path(points=[2199,3600,2166,3581,2138,3491,2131,3380,2116,3138,2156,2818,2236,2540,2290,2352,2291,2338,2300,1890,2305,1656,2313,1425,2319,1375,2361,1043,2463,896,2698,835,2733,826,2819,813,2888,806,3015,794,3410,643,3627,560,3830,487,3860,480,4044,437,4246,345,4465,204,4637,93,4711,57,4819,29,4976,-11,5298,-5,5478,41,5520,52,5596,83,5649,112,5825,208,5873,229,5945,240,6119,268,6149,274,6220,297,6371,346,6517,457,6607,594,6663,679,6930,991,6992,1044,7083,1122,7183,1165,7371,1205,7467,1225,7488,1234,7596,1300,7727,1379,7791,1434,7823,1495,7852,1549,7851,1658,7821,1760,7773,1927,7767,2007,7760,2655,7753,3292,7751,3310,7708,3395,7649,3508,7549,3498,7466,3371,7416,3295,7392,3212,7311,2827,7272,2641,7232,2474,7224,2457,7152,2316,7041,2274,6914,2341,6882,2358,6839,2380,6818,2391,6734,2434,6627,2463,6543,2464,6468,2465,6458,2463,6418,2435,6389,2415,6366,2387,6347,2349,6318,2291,6291,2168,6290,2091,6290,2051,6288,2048,6268,2053,6255,2056,6211,2062,6170,2065,6067,2074,6047,2084,5998,2149,5975,2180,5947,2213,5935,2222,5906,2247,5781,2274,5737,2266,5690,2257,5648,2214,5626,2153,5591,2055,5596,2060,5538,2060,5509,2060,5455,2057,5419,2054,5353,2047,5340,2101,5308,2233,5293,2248,5208,2229,5139,2214,5110,2192,5110,2157,5110,2111,5088,2096,5012,2092,4943,2088,4863,2169,4681,2354,4504,2355,4395,2172,4363,2118,4371,2121,4233,2104,4182,2098,4162,2136,4136,2187,4075,2245,4028,2265,3918,2310,3829,2245,3798,2096,3785,2037,3705,2044,3661,2047,3611,2050,3593,2050,3565,2050,3560,2055,3547,2093,3538,2116,3529,2173,3526,2219,3523,2269,3514,2312,3505,2326,3481,2362,3417,2390,3332,2400,3290,2405,3219,2414,3175,2419,3095,2429,3059,2390,3013,2339,2981,2332,2936,2359,2902,2380,2683,2623,2647,2680,2623,2718,2595,2837,2565,3030,2528,3274,2500,3351,2403,3488,2331,3590,2254,3632,2199,3600],operators=[0,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,1,1,2,2,1,1,2,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        v0.transform = (.05,0,0,-0.05,400,1220)
        #v0.scale(float(float(s)/float(100)), float(float(s)/float(100)))
        #g.add(v0)        
        #g.add(v1)        

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(1280)), float(float(s)/float(1600)))

        return g


class BareTriangle(_Symbol):

    _attrMap = AttrMap(
        x = AttrMapValue(isNumber,desc="x offset"),
        y = AttrMapValue(isNumber,desc="y offset"),
        size = AttrMapValue(isNumber,desc="scale"),
        background = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        fillColor = AttrMapValue(isColorOrNone,desc='the color of the fill'),
        strokeColor = AttrMapValue(isColorOrNone,desc='the color of the stroke'),
        #strokeWidth = AttrMapValue(isNumber,desc="width of stroke"),
        )

    def __init__(self,width=200.0,height=200.0,*args,**kw):
        self.x = 0
        self.y = 0
        self.size = 100
        self.fillColor = colors.yellow
        self.strokeColor = colors.black

    def draw(self):
        # general widget bits
        s = float(self.size)  # abbreviate as we will use this a lot
        g = shapes.Group()

        g.add(Path(points=[597.6,499.6,313.8,8,310.9,3,305.6,0,299.9,0,294.2,0,288.9,3.1,286,8,2.2,499.6,-0.7,504.6,-0.7,510.7,2.2,515.6,5.1,520.6,10.4,523.6,16.1,523.6,583.7,523.6,589.4,523.6,594.7,520.5,597.6,515.6,600.5,510.6,600.5,504.5,597.6,499.6],operators=[0,1,2,2,1,2,2,1,2,2,3],isClipPath=0,autoclose=None,strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.strokeColor))
        g.add(Polygon(points=[299.875,48.2,555.875,491.5,43.875,491.5],strokeDashArray=None,strokeWidth=1,strokeMiterLimit=0,strokeOpacity=1,strokeLineJoin=0,fillOpacity=1,strokeColor=None,strokeLineCap=0,fillColor=self.fillColor))

        g.transform = (1,0,0,-1,self.x, self.y+s)
        g.scale(float(float(s)/float(600)), float(float(s)/float(600)))

        return g





def test():
    """
    This function produces a number of pdf files with examples of all
    the signs and symbols from this file.
    """
    labelFontSize = 10


    #PAGE 1

    D = shapes.Drawing(450,650)

    cb = Radioactive()
    cb.x = 20
    cb.y = 530
    D.add(cb)
    D.add(shapes.String(cb.x+(cb.size/2),(cb.y-(1.2*labelFontSize)),
                           cb.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                           fontSize=labelFontSize))



    tb = Biohazard()
    tb.x = 170
    tb.y = 530
    D.add(tb)
    D.add(shapes.String(tb.x+(tb.size/2),(tb.y-(1.2*labelFontSize)),
                            tb.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))


    yn = Cognitohazard()
    yn.x = 320
    yn.y = 530
    D.add(yn)
    tempstring = yn.__class__.__name__
    D.add(shapes.String(yn.x+(tb.size/2),(yn.y-(1.2*labelFontSize)),
                            tempstring, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))


    ss1 = Infohazard()
    ss1.x = 20
    ss1.y = 400
    D.add(ss1)
    D.add(shapes.String(ss1.x+(ss1.size/2), ss1.y-(1.2*labelFontSize),
                            ss1.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    ss2 = Hostile()
    ss2.x = 170
    ss2.y = 400
    D.add(ss2)
    D.add(shapes.String(ss2.x+(ss2.size/2), ss2.y-(1.2*labelFontSize),
                            ss2.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    ss3 = BareTriangle()
    ss3.x = 320
    ss3.y = 400
    D.add(ss3)
    D.add(shapes.String(ss3.x+(ss3.size/2), ss3.y-(1.2*labelFontSize),
                            ss3.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    ne = Radioactive()
    ne.x = 20
    ne.y = 270
    ne.size = 100
    ne.strokeColor = colors.red
    ne.fillColor = colors.black
    D.add(ne)
    D.add(shapes.String(ne.x+(ne.size/2),(ne.y-(1.2*labelFontSize)),
                            ne.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))


##    ne = Hostile()
##    ne.x = 20
##    ne.y = 270
##    ne.size = 120
##
##    ne = Hostile()
##    ne.x = 20
##    ne.y = 270
##    ne.strokeColor = colors.red
##    ne.fillColor = colors.black
##    D.add(ne)
##    D.add(shapes.String(ne.x+(ne.size/2),(ne.y-(1.2*labelFontSize)),
##                            ne.__class__.__name__, fillColor=colors.black, textAnchor='middle',
##                            fontSize=labelFontSize))

    # Do some in red & black to prove that feeding in strokeColor and fillColor attributes works OK.

    sf = Biohazard()
    sf.x = 170
    sf.y = 270
    sf.size = 100
    sf.strokeColor = colors.red
    sf.fillColor = colors.black
    D.add(sf)
    D.add(shapes.String(sf.x+(sf.size/2),(sf.y-(1.2*labelFontSize)),
                            sf.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))


    ds = Cognitohazard()
    ds.x = 320
    ds.y = 270
    ds.size = 100
    ds.strokeColor = colors.red
    ds.fillColor = colors.black
    D.add(ds)
    D.add(shapes.String(ds.x+(ds.size/2),(ds.y-(1.2*labelFontSize)),
                            ds.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    na = Infohazard()
    na.x = 20
    na.y = 140
    na.size=100
    na.strokeColor = colors.red
    na.fillColor = colors.black
    D.add(na)
    D.add(shapes.String(na.x+(na.size/2),(na.y-(1.2*labelFontSize)),
                            na.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    ns = Hostile()
    ns.x = 170
    ns.y = 140
    #ns.size=125
    #ns.size=110
    ns.size=100
    ns.strokeColor = colors.red
    ns.fillColor = colors.black
    D.add(ns)
    D.add(shapes.String(ns.x+(ns.size/2),(ns.y-(1.2*labelFontSize)),
                            ns.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    fd = BareTriangle()
    fd.x = 320
    fd.y = 140
    fd.size=100
    fd.strokeColor = colors.red
    fd.fillColor = colors.black
    D.add(fd)
    D.add(shapes.String(fd.x+(fd.size/2),(fd.y-(1.2*labelFontSize)),
                            fd.__class__.__name__, fillColor=colors.black, textAnchor='middle',
                            fontSize=labelFontSize))

    D.add(shapes.String(450/2,26,
                        "HAZARD/WARNING SYMBOLS",
                        fillColor=colors.black, textAnchor='middle',
                        fontSize=labelFontSize*2))

    renderPDF.drawToFile(D, 'hazard_widgets_1.pdf', 'hazard_widgets_1.py')
    print('wrote file: hazard_widgets_1.pdf')


def make_example_signs():
    risks_list =  ["RADIOACTIVE", "BIOHAZARD", "COGNITOHAZARD", "INFOHAZARD", "HOSTILE"]

    height = 1080
    width = 720
    margin = 24

    print

    for this_risk in risks_list:
        risk_filename_stub = this_risk.lower()
        risk_filename_stub = "warning_sign_%02d_%s" % (risks_list.index(this_risk)+1, this_risk.lower())
        risk_fontsize = 72
        if this_risk == "COGNITOHAZARD":
            risk_fontsize2 = 52
        else:
            risk_fontsize2 = 72
        risk_font = "Gill Sans Nova Bold"
        
        #risk_line1_y = height-700
        risk_line1_y = height-750
        risk_line2_y = risk_line1_y - (risk_fontsize * 1.25)

        risk_box_width = width - (margin*6)
        risk_box_height = (risk_fontsize * 2.0) + 100

        risk_box_x1 = margin * 3
        risk_box_y1 = (risk_line1_y - 25)-(risk_box_height/2.0)

        drisk = Drawing(width, height)
        drisk.add(Rect(0, 0, width, height, fillColor=colors.white))
        drisk.add(Rect(risk_box_x1, risk_box_y1, risk_box_width, risk_box_height, fillColor=colors.yellow, strokeColor=colors.yellow))

        if this_risk == "RADIOACTIVE":
            risk_widget = Radioactive()
        elif this_risk == "BIOHAZARD":
            risk_widget = Biohazard()
        elif this_risk == "COGNITOHAZARD":
            risk_widget = Cognitohazard()
        elif this_risk == "INFOHAZARD":
            risk_widget = Infohazard()
        elif this_risk == "HOSTILE":
            #risk_widget = hazard_widgets.Hostile()
            #bodge - fix later
            risk_widget = BareTriangle()

        else:
            risk_widget = BareTriangle()

        drisk.add(risk_widget)

        risk_widget.x = risk_box_x1                     # symbol x coordinate
        risk_widget.y = height - 50 - risk_box_width    # symbol y coordinate
        risk_widget.size = risk_box_width

        if this_risk == "HOSTILE":
            risk_widget2 = Hostile()
            #bodge - fix later
            #(Hostile widget doesn't display correctly - remove this once it does)
            risk_widget2.x = risk_box_x1                     # symbol x coordinate
            risk_widget2.y = height - 50 - risk_box_width    # symbol y coordinate
            risk_widget2.size = risk_box_width
            drisk.add(risk_widget2)

        risk_line_1 = "WARNING"
        risk_line_2 = this_risk

        risk_line_1_width = stringWidth(risk_line_1, risk_font, risk_fontsize)
        risk_line_2_width = stringWidth(risk_line_2, risk_font, risk_fontsize2)

        risk_line_1_x = (width - risk_line_1_width)/2.0
        risk_line_1_y = risk_line1_y

        risk_line_2_x = (width - risk_line_2_width)/2.0
        risk_line_2_y = risk_line2_y

        #"WARNING" line
        drisk.add(String(risk_line_1_x, risk_line_1_y, risk_line_1, fontName=risk_font, fontSize=risk_fontsize, fillColor=colors.black))
        #"BIOHAZARD", "RADIATION", or whatever
        drisk.add(String(risk_line_2_x, risk_line_2_y, risk_line_2, fontName=risk_font, fontSize=risk_fontsize2, fillColor=colors.black))

        lgrisk = scp_widgets.SCPLogo()
        lgrisk.size = 80

        lgrisk.x = width - (margin * 3) - lgrisk.size
        lgrisk.y = height-1025
        drisk.add(lgrisk)

        drisk.add(String((lgrisk.x+(lgrisk.size*0.6))-(stringWidth('Secure. Contain. Protect', "Bauhaus Demi", 12)/2.0),
                         lgrisk.y-(lgrisk.size*0.35), 'Secure. Contain. Protect', fontName="Bauhaus Demi", fontSize=12, fillColor=colors.black))

        lgrisk = scp_widgets.SCPLogo()
        lgrisk.size = 80

        lgrisk.x = width - (margin * 3) - lgrisk.size
        lgrisk.y = height-1025
        drisk.add(lgrisk)

        drisk.add(String((lgrisk.x+(lgrisk.size*0.6))-(stringWidth('Secure. Contain. Protect', "Bauhaus Demi", 12)/2.0),
                         lgrisk.y-(lgrisk.size*0.35), 'Secure. Contain. Protect', fontName="Bauhaus Demi", fontSize=12, fillColor=colors.black))

        renderPM.drawToFile(drisk, '%s.png' % risk_filename_stub, 'PNG')
        print "WROTE '%s.png'" % risk_filename_stub
        if os.path.isdir(os.path.join(os.getcwd(), "images", "signage", "containment")):
            renderPM.drawToFile(drisk, '%s.png' % os.path.join(os.getcwd(), "images", "signage", "containment", risk_filename_stub), 'PNG')
            print "WROTE '%s.png'" % os.path.join(os.getcwd(), "images", "signage", "containment", risk_filename_stub)

        renderPDF.drawToFile(drisk, '%s.pdf' % risk_filename_stub, this_risk)
        print "WROTE '%s.pdf'" % risk_filename_stub
        if os.path.isdir(os.path.join(os.getcwd(), "images", "signage", "containment")):
            renderPDF.drawToFile(drisk, os.path.join(os.getcwd(), "images", "signage", "containment", '%s.pdf' % risk_filename_stub), this_risk)
            print "WROTE '%s.pdf'" % os.path.join(os.getcwd(), "images", "signage", "containment", risk_filename_stub)

        print


def make_elements():

    outputdir = os.path.join(os.getcwd(),"images", "signage", "elements")

    for obj in sys.modules['__main__'].__dict__:
        #print "trying '%s'" % obj
        if type(eval(obj)) == ClassType:
            x = eval(obj)
            if "draw" in x.__dict__:
                fnamestub = os.path.join(outputdir, obj)
                height = 720
                width = 720
                margin = 32
                d = Drawing(width, height)
                item = eval("%s()" % obj)
                #print x
                #print type(x)
                try:
                    item.x = margin
                    #item.y = height - margin
                    item.y = margin
                    item.size = height-(margin*2)
                    #specials...
                    if obj == "SCPLogo":
                        item.x = 0-(margin)
                        item.y = item.y + (margin*2.5)
                        item.size = height-(margin*2.15)
                    d.add(item)
                    renderPDF.drawToFile(d, '%s.pdf' % fnamestub, obj)
                    print "\twrote file '%s'.pdf" % fnamestub
                    renderPM.drawToFile(d, '%s.png' % fnamestub, 'PNG')
                    print "\twrote file '%s'.png" % fnamestub
                except:
                    #we don't care if we can't make something for eg Widget or Drawing
                    pass


if __name__=='__main__':
    test()
    make_example_signs()
    if MAKE_ELEMENTS > 0:
        make_elements()

